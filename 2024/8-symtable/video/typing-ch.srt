1
00:00:00,070 --> 00:00:04,960
前几课我们讨论了错误
以及如何处理它们。

2
00:00:04,960 --> 00:00:09,730
错误有多种类型，我
希望你记住一种特定的错误。

3
00:00:09,730 --> 00:00:11,700
以下是该教训的一小部分：

4
00:00:11,700 --> 00:00:12,790
下一种错误是当您将
一件事与另一件事混淆时。

5
00:00:12,790 --> 00:00:13,790
看这段代码：

6
00:00:13,790 --> 00:00:15,679
首先，我们创建一个常量。

7
00:00:15,679 --> 00:00:19,680
请记住，这就像给某个东西命名，
在本例中 - 给数字 12 命名为“length”。

8
00:00:19,680 --> 00:00:20,680


9
00:00:20,680 --> 00:00:26,660
然后，在第二行，我们调用函数
“length”并传递一个参数 - 数字 54。

10
00:00:26,660 --> 00:00:29,380
但是等等！  `length` 不是一个函数！

11
00:00:29,380 --> 00:00:30,880
这是一个数字。

12
00:00:30,880 --> 00:00:34,260
数字不是函数，也不是
能做事的盒子。

13
00:00:34,260 --> 00:00:37,149
这正是 JavaScript 会抱怨的方式：

14
00:00:37,149 --> 00:00:40,989
这是一个**类型错误**——
您使用的东西的类型是错误的。

15
00:00:40,989 --> 00:00:45,940
JavaScript 解释器不会告诉你
这个东西**是什么**，但它会告诉你

16
00:00:45,940 --> 00:00:49,190
它**不**什么。  `length` 不是一个函数。

17
00:00:49,190 --> 00:00:52,590
类型错误就像让你的猫
洗衣服一样。

18
00:00:52,590 --> 00:00:55,130
您可能想问您的室友。

19
00:00:55,130 --> 00:00:59,320
在编程中，“类型”是
信息的分类。

20
00:00:59,320 --> 00:01:04,570
这是一个通用术语，不同的编程
语言以不同的方式处理类型。

21
00:01:04,570 --> 00:01:09,659
正如您现在所知，JavaScript 可以以某种方式
看到类型之间的差异。

22
00:01:09,659 --> 00:01:15,320
函数是一种类型，数字是另一种类型，
并且不能只将数字用作函数。

23
00:01:15,320 --> 00:01:20,710
`typeof` 是一个特殊的运算符，它返回
一个指示类型的字符串。

24
00:01:20,710 --> 00:01:28,939
42和3.14显然是数字，
引号中的一些字母组​​合是字符串，

25
00:01:28,939 --> 00:01:31,140
true和false是布尔值。

26
00:01:31,140 --> 00:01:36,009
这些是 JavaScript 中的一些类型
——数字、字符串、布尔值。

27
00:01:36,009 --> 00:01:40,259
NaN 的意思是“不是数字”，但 NaN 的类型
是“数字”。

28
00:01:40,259 --> 00:01:42,320
是的，我知道。

29
00:01:42,320 --> 00:01:43,650
JavaScript 的另一个怪异之处。

30
00:01:43,650 --> 00:01:46,840
这些就是这种语言的规则。

31
00:01:46,840 --> 00:01:48,640
类型很有帮助。

32
00:01:48,640 --> 00:01:53,299
当我们尝试像函数一样运行一个数字时
，JavaScript 开始抱怨

33
00:01:53,299 --> 00:01:55,659
，我们可以看到问题并修复它。

34
00:01:55,659 --> 00:02:01,210
如果 JavaScript 中没有任何类型的概念，
我们要么会看到一些奇怪的意外

35
00:02:01,210 --> 00:02:04,479
行为，要么会看到一些神秘的错误。 我们不会说

36
00:02:04,479 --> 00:02:10,640
“长度不是函数”，而是
“对不起戴夫，

37
00:02:10,640 --> 00:02:13,560
恐怕我做不到”。

38
00:02:13,560 --> 00:02:17,080
如果您创建了一个变量，但没有给
它任何值怎么办？

39
00:02:17,080 --> 00:02:18,510
那会是什么类型呢？

40
00:02:18,510 --> 00:02:21,760
它不是一个数字，不是一个字符串，不是……任何东西。

41
00:02:21,760 --> 00:02:23,400
因为没有价值，对吗？ 在这种情况下，

42
00:02:23,400 --> 00:02:26,730
JavaScript 在你背后做了一些事情
。

43
00:02:26,730 --> 00:02:31,340
没有值的变量实际上有
一个特殊的值——“未定义”。

44
00:02:31,340 --> 00:02:34,140
这个变量的类型称为“未定义”。

45
00:02:34,140 --> 00:02:43,160
因此，例如，类型“number”有很多
潜在值：1、2、-10、69000 和其他

46
00:02:43,160 --> 00:02:44,160
数字。

47
00:02:44,160 --> 00:02:47,350
但类型“undefined”只有一个值——“undefined”。 当涉及到编程类型时，

48
00:02:47,350 --> 00:02:53,600
有两件重要的事情需要理解
：动态

49
00:02:53,600 --> 00:02:56,420
与静态以及弱与强。

50
00:02:56,420 --> 00:03:01,270
为了理解
动态类型和静态类型之间的区别，我们首先要

51
00:03:01,270 --> 00:03:06,000
看看编写的程序如何成为实际
运行的程序。

52
00:03:06,000 --> 00:03:10,900
您编写的代码通常会转换为
计算机知道如何运行的其他形式

53
00:03:10,900 --> 00:03:12,060
。

54
00:03:12,060 --> 00:03:17,120
这个过程称为编译，
发生这种情况的时间称为“编译

55
00:03:17,120 --> 00:03:18,120
时间”。

56
00:03:18,120 --> 00:03:22,980
编译结束后，程序
启动，其运行的时期称为

57
00:03:22,980 --> 00:03:24,610
“运行时”。

58
00:03:24,610 --> 00:03:29,580
某些语言在编译时检查类型并查找
类型错误。

59
00:03:29,580 --> 00:03:32,520
那些有静态类型。

60
00:03:32,520 --> 00:03:37,450
其他语言在运行时检查类型并查找
类型错误。

61
00:03:37,450 --> 00:03:39,700
这些具有动态类型。

62
00:03:39,700 --> 00:03:44,590
另一种思考方式：静态类型
意味着在运行程序之前检查类型

63
00:03:44,590 --> 00:03:50,040
，动态类型意味着
在运行程序时检查类型。

64
00:03:50,040 --> 00:03:55,740
C#、C++、Java、Go 是静态类型语言。

65
00:03:55,740 --> 00:04:00,010
如果您创建一个数字并尝试将其
视为其中一种语言的函数，那么您将

66
00:04:00,010 --> 00:04:04,860
在编译期间收到错误，并且您的
程序甚至不会尝试运行 - 它不会

67
00:04:04,860 --> 00:04:11,010
到达这一点，因为类型错误 会
在运行时之前、编译时被发现。

68
00:04:11,010 --> 00:04:15,910
JavaScript、Ruby、PHP 是动态类型
语言。

69
00:04:15,910 --> 00:04:21,160
正如您之前所看到的，如果使用不正确的
类型，您的程序确实会运行，并且

70
00:04:21,160 --> 00:04:25,320
仅在执行该特定代码行时才会发生错误
。

71
00:04:25,320 --> 00:04:29,060
因此，在运行时检查类型。

72
00:04:29,060 --> 00:04:35,340
实际上，JavaScript *通常*
根本没有任何编译，但这是

73
00:04:35,340 --> 00:04:37,710
另一节课的主题。

74
00:04:37,710 --> 00:04:41,400
动态类型并不比静态类型更差或更好
。

75
00:04:41,400 --> 00:04:45,450
两种方式都有优点和缺点。

76
00:04:45,450 --> 00:04:50,100
动态类型语言通常更容易
学习和编写程序，但是，正如

77
00:04:50,100 --> 00:04:53,690
您可以想象的那样，它会导致更多的错误
和错误。

78
00:04:53,690 --> 00:04:57,180
现在我们来谈谈弱类型和强类型。

79
00:04:57,180 --> 00:04:59,370
查看这段 JavaScript 代码：

80
00:04:59,370 --> 00:05:00,500
是的...

81
00:05:00,500 --> 00:05:01,590
这是...

82
00:05:01,590 --> 00:05:04,010
好吧，发生了什么事？ 将

83
00:05:04,010 --> 00:05:08,920
数字 4 添加到字符串“7”中，得到
字符串“47”。

84
00:05:08,920 --> 00:05:14,990
JavaScript 将数字 4 转换为字符串
“4”，并将两个字符串连接起来——将

85
00:05:14,990 --> 00:05:16,310
它们粘合在一起。

86
00:05:16,310 --> 00:05:20,750
JavaScript 只是冒昧地假设
这就是我们想要的。

87
00:05:20,750 --> 00:05:23,380
很难责怪它——我们想要什么？

88
00:05:23,380 --> 00:05:27,530
将数字添加到字符串中——这是没有
意义的。

89
00:05:27,530 --> 00:05:33,250
其他一些语言，比如 Ruby 或 Python，只会
抱怨而不做任何事情。 根据 JavaScript，

90
00:05:33,250 --> 00:05:39,190
数字 4 乘以字符串“7”就是
28。

91
00:05:39,190 --> 00:05:45,360
在本例中，它将字符串“7”转换为
数字 7 并进行正常的乘法。

92
00:05:45,360 --> 00:05:47,590
JavaScript 经常这样做。

93
00:05:47,590 --> 00:05:52,580
它知道不同值的类型，
但是当类型不匹配时，它会尝试假设

94
00:05:52,580 --> 00:05:56,280
并在不同类型之间进行转换，而不告诉
您。

95
00:05:56,280 --> 00:05:59,560
有时它很有用，有时却令人难以置信。

96
00:05:59,560 --> 00:06:03,790
发生这种情况是因为 JavaScript 是一种弱
类型语言。

97
00:06:03,790 --> 00:06:10,760
它有类型的概念，但它就像，
“这只是一个游戏，你为什么要生气呢？”

98
00:06:10,760 --> 00:06:15,190
这与动态类型与
静态类型无关，后者与何时检查

99
00:06:15,190 --> 00:06:16,600
类型有关。

100
00:06:16,600 --> 00:06:21,410
强与弱在于你
在检查类型时有多认真。

101
00:06:21,410 --> 00:06:28,170
您可以说弱类型是宽松类型，
强类型是严格类型。

102
00:06:28,170 --> 00:06:33,740
与动态与静态不同，
打字系统的强度是一个范围。

103
00:06:33,740 --> 00:06:36,210
JavaScript 的类型非常弱。

104
00:06:36,210 --> 00:06:38,650
PHP 的类型稍强一些。

105
00:06:38,650 --> 00:06:40,790
Python——甚至更强大。 这

106
00:06:40,790 --> 00:06:44,300
三种语言都是动态类型语言。

107
00:06:44,300 --> 00:06:51,180
因此，JavaScript 做了很多隐式转换，
但它也为我们提供了自己进行显式

108
00:06:51,180 --> 00:06:52,830
转换的工具。

109
00:06:52,830 --> 00:06:59,070
我们可以将字符串转换为数字，数字转换
为字符串，布尔值转换为字符串等，如下所示：

110
00:06:59,070 --> 00:07:05,160
您可能会猜到隐式类型
转换并不是最好的主意。

111
00:07:05,160 --> 00:07:11,280
隐式意味着隐藏，隐藏意味着
难以理解、容易出错。

112
00:07:11,280 --> 00:07:15,280
程序的行为变得不那么明显。

113
00:07:15,280 --> 00:07:20,949
是的，您编写的代码更少，但代码
更脆弱且更难以理解。

