# selection-sort-chatgpt.asm
# This is automatically generated by ChatGPT 3.5

.data
numbers: .word 7, 2, 9, 4, 1, 5   # Array of numbers to be sorted
size: .word 6                      # Size of the array

.text
.globl _start
_start:
    la a0, numbers                 # Load the address of the array
    lw a1, size                    # Load the size of the array

    li t0, 0                       # Outer loop index i

outer_loop:
    li t1, 1                       # Inner loop index j
    li t2, 0x7fffffff              # Initialize the minimum value to a large number
    li t3, 0                       # Index of the minimum value

inner_loop:
    beq t1, a1, swap               # Exit inner loop if j == size

    lw t4, 0(a0)                   # Load numbers[j]
    blt t4, t2, update_min         # Check if numbers[j] < min_value

    addi t1, t1, 1                 # Increment j
    j inner_loop                   # Continue inner loop

update_min:
    mv t2, t4                      # Update min_value with numbers[j]
    mv t3, t1                      # Update index of min_value

    addi t1, t1, 1                 # Increment j
    j inner_loop                   # Continue inner loop

swap:
    beq t0, a1, end                # Exit outer loop if i == size

    la t5, numbers                 # Load the address of the array
    lw t6, 0(t5)                   # Load numbers[i]

    addi t7, t0, 1                 # Index of the next element
    slli t7, t7, 2                 # Multiply index by 4 (word size)
    add t7, t5, t7                 # Compute the address of the next element
    lw t8, 0(t7)                   # Load the next element

    blt t8, t6, update_indices     # Check if next element < current min_value

    addi t0, t0, 1                 # Increment i
    j outer_loop                   # Continue outer loop

update_indices:
    sw t8, 0(t5)                   # Store the next element at numbers[i]
    sw t6, 0(t7)                   # Store the current element at numbers[j]

    addi t0, t0, 1                 # Increment i
    j outer_loop                   # Continue outer loop

end:
    # The sorted array is now in memory, you can perform further operations or return

    # End of program
    li a7, 10                      # System call number for program exit
    li a0, 0                       # Exit code 0
    ecall                          # Perform the system call to exit
